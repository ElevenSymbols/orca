'use client';

import React from 'react';
import './globals.css';

import axios from 'axios';
import Router from 'next/router';
import NProgress from 'nprogress';
import { useEffect, useRef, useState } from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import { ReactQueryDevtools } from 'react-query/devtools';
import { Provider as ReduxProvider } from 'react-redux';
import { ThemeProvider } from 'styled-components';
import App from '../components/App';
import AuthPopup from '../components/Auth';
import StyledComponentsRegistry from '../lib/registry';
import { store } from '../store';
import currentTheme, { Theme } from '../theme';
import { Config } from '../utils';

axios.defaults.baseURL = Config.API_URL;
axios.defaults.withCredentials = true;

/* TODO: should split the code here later, `use client` should not be here */
/* export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
  viewport: {
    initialScale: 1,
    width: 'device-width',
  },
}
 */
export default function RootLayout({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>(null);
  const queryClientRef = useRef(null);
  if (!queryClientRef.current) {
    queryClientRef.current = new QueryClient({
      defaultOptions: {
        queries: {
          refetchOnWindowFocus: false,
        },
      },
    });
  }

  useEffect(() => {
    const nProgressStart = () => NProgress.start();
    const nProgressDone = () => NProgress.done();

    // N Progress.
    Router.events.on('routeChangeStart', nProgressStart);
    Router.events.on('routeChangeComplete', nProgressDone);
    Router.events.on('routeChangeError', nProgressDone);

    return () => {
      // N Progress.
      Router.events.on('routeChangeStart', nProgressStart);
      Router.events.on('routeChangeComplete', nProgressDone);
      Router.events.on('routeChangeError', nProgressDone);
    };
  }, []);

  return (
    <html lang="en">
      <body>
        <QueryClientProvider client={queryClientRef.current}>
          <ReduxProvider store={store}>
            <StyledComponentsRegistry>
              <ThemeProvider theme={theme || currentTheme}>
                <App setTheme={setTheme}>{children}</App>
                <AuthPopup />
              </ThemeProvider>
            </StyledComponentsRegistry>
          </ReduxProvider>

          <ReactQueryDevtools initialIsOpen={false} />
        </QueryClientProvider>
      </body>
    </html>
  );
}
